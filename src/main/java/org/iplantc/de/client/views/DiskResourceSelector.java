package org.iplantc.de.client.views;

import org.iplantc.core.client.widgets.validator.IPlantValidator;
import org.iplantc.core.client.widgets.views.IDiskResourceSelector;
import org.iplantc.core.uidiskresource.client.models.DiskResource;
import org.iplantc.de.client.I18N;

import com.extjs.gxt.ui.client.event.BaseEvent;
import com.extjs.gxt.ui.client.event.Events;
import com.extjs.gxt.ui.client.event.Listener;
import com.extjs.gxt.ui.client.widget.HorizontalPanel;
import com.extjs.gxt.ui.client.widget.button.Button;
import com.extjs.gxt.ui.client.widget.form.TextField;
import com.google.gwt.user.client.Command;

/**
 * Models a composite widget for selecting a file from a user's workspace.
 * 
 * @author lenards
 * 
 */
public abstract class DiskResourceSelector implements IDiskResourceSelector {
    protected DiskResource selectedResource;
    protected String currentFolderId;

    protected TextField<String> txtResourceName;
    protected Command cmdChange;

    protected String tag;
    private final HorizontalPanel composite = new HorizontalPanel();
    private Button btnLaunch;

    /**
     * Default constructor.
     */
    public DiskResourceSelector(String tag) {
        this(null, tag);
    }

    /**
     * Instantiate with command for when value changes.
     * 
     * @param cmdChange command to fire.
     * @param tag to this widget
     */
    public DiskResourceSelector(Command cmdChange, String tag) {
        this.cmdChange = cmdChange;
        this.tag = tag;
        initWidgets();
    }

    /**
     * Initialize widgets to display.
     */
    protected void initWidgets() {
        txtResourceName = new TextField<String>();
        txtResourceName.setId("idResourceName_" + tag); //$NON-NLS-1$
        txtResourceName.setReadOnly(true);
        txtResourceName.setWidth(254);
        txtResourceName.addListener(Events.OnClick, new Listener<BaseEvent>() {
            @Override
            public void handleEvent(final BaseEvent be) {
                if ((txtResourceName.getValue() == null) || txtResourceName.getValue().isEmpty()) {
                    handleBrowseEvent(be);
                }
            }
        });

        btnLaunch = new Button(I18N.DISPLAY.browse());
        btnLaunch.setStyleAttribute("padding-left", "20px"); //$NON-NLS-1$ //$NON-NLS-2$
        btnLaunch.setId("idBtnLaunch_" + tag); //$NON-NLS-1$
        btnLaunch.addListener(Events.OnClick, new Listener<BaseEvent>() {
            @Override
            public void handleEvent(BaseEvent be) {
                handleBrowseEvent(be);
            }
        });

        btnLaunch.focus();

        composite.add(txtResourceName);
        composite.add(btnLaunch);
    }

    /**
     * Handles the browse button event.
     */
    protected void handleBrowseEvent(BaseEvent be) {
        launchBrowseDialog(tag);
    }

    /**
     * Handles the browse button event.
     * 
     * @param tag The tag generated by createTag
     */
    protected abstract void launchBrowseDialog(String tag);

    /**
     * {@inheritDoc}
     */
    @Override
    public void setId(String id) {
        composite.setId(id);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getId() {
        return composite.getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HorizontalPanel getWidget() {
        return composite;
    }

    /**
     * Indicates if the widget has a selected file.
     * 
     * @return true, if there is a selection; otherwise false.
     */
    protected boolean hasSelectedResource() {
        return selectedResource != null;
    }

    /**
     * Retrieves the selected file.
     * 
     * This will return null when a file is not selected.
     * 
     * @return a reference to the selected file or null when there is no selection.
     */
    protected DiskResource getSelectedResource() {
        return selectedResource;
    }

    /**
     * Defines the selected file.
     * 
     * This will all set the selected file in the underlying widgets (including the FileSelectDialog)
     * 
     * @param file the selected file
     */
    protected void setSelectedResource(DiskResource resource) {
        selectedResource = resource;
    }

    /**
     * Retrieves an identifier for the file that can be used to fetch metadata or content.
     * 
     * This will return null when a file is not selected.
     * 
     * @return a string representing the identifier for the selected file or null when there is no
     *         selection.
     */
    protected String getSelectedResourceId() {
        return hasSelectedResource() ? selectedResource.getId() : null;
    }

    /**
     * Retrieves an identifier for the file that can be used to fetch metadata or content.
     * 
     * This will return null when a file is not selected.
     * 
     * @return a string representing the identifier for the selected file or null when there is no
     *         selection.
     */
    protected String getSelectedResourceName() {
        return hasSelectedResource() ? selectedResource.getName() : ""; //$NON-NLS-1$
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setSpacing(int spacing) {
        composite.setSpacing(spacing);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setButtonText(String text) {
        btnLaunch.setText(text);
    }

    /**
     * Set file name to display.
     * 
     * @param name file name to display.
     */
    protected void displayResourceName(String name) {
        txtResourceName.setValue(name);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setValidator(IPlantValidator validator) {
        if (validator != null) {
            txtResourceName.setValidator(validator);
            txtResourceName.setValidateOnBlur(true);
            txtResourceName.setAllowBlank(!validator.isRequired());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getCurrentFolderId() {
        return currentFolderId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setCurrentFolderId(String currentFolderId) {
        this.currentFolderId = currentFolderId;
    }

    public void clearSelection() {
        selectedResource = null;
        currentFolderId = null;
        txtResourceName.setValue("");
    }

}
